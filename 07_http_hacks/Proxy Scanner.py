1 #!/usr/bin/python 2 3 import sys 4 import os 5 import socket 6 import urllib 7 from random import randint 8 9 # Often used proxy ports 10 proxy_ports = [3128, 8080, 8181, 8000, 1080, 80] 11 12 # URL we try to fetch 13 get_host = "www.google.com" 14 socket.setdefaulttimeout(3) 15 16 # get a list of ips from start / stop ip 17 def get_ips(start_ip, stop_ip): 18 ips = [] 19 tmp = [] 20 21 for i in start_ip.split(’.’): 22 tmp.append("%02X" % long(i)) 23 24 start_dec = long(’’.join(tmp), 16) 25 tmp = [] 26 27 for i in stop_ip.split(’.’):
108 7 HTTP Hacks
28 tmp.append("%02X" % long(i)) 29 30 stop_dec = long(’’.join(tmp), 16) 31 32 while(start_dec < stop_dec + 1): 33 bytes = [] 34 bytes.append(str(int(start_dec / 16777216))) 35 rem = start_dec % 16777216 36 bytes.append(str(int(rem / 65536))) 37 rem = rem % 65536 38 bytes.append(str(int(rem / 256))) 39 rem = rem % 256 40 bytes.append(str(rem)) 41 ips.append(".".join(bytes)) 42 start_dec += 1 43 44 return ips 45 46 47 # try to connect to the proxy and fetch an url 48 def proxy_scan(ip): 49 # for every proxy port 50 for port in proxy_ports: 51 try: 52 # try to connect to the proxy on that port 53 s = socket.socket(socket.AF_INET, 54 socket.SOCK_STREAM) 55 s.connect((ip, port)) 56 print ip + ":" + str(port) + " OPEN" 57 58 # try to fetch the url 59 print "GET " + get_host + " HTTP/1.0\n" 60 s.send("GET " + get_host + " HTTP/1.0\r\n") 61 s.send("\r\n") 62 63 # get and print response 64 while 1: 65 data = s.recv(1024) 66 67 if not data: 68 break 69 70 print data 71 72 s.close()
7.14 Proxy Port Scanner 109
73 except socket.error: 74 print ip + ":" + str(port) + " Connection refused" 75 76 # parsing parameter 77 if len(sys.argv) < 2: 78 print sys.argv[0] + ": <start_ip-stop_ip>" 79 sys.exit(1) 80 else: 81 if len(sys.argv) == 3: 82 get_host = sys.argv[2] 83 84 if sys.argv[1].find(’-’) > 0: 85 start_ip, stop_ip = sys.argv[1].split("-") 86 ips = get_ips(start_ip, stop_ip) 87 88 while len(ips) > 0: 89 i = randint(0, len(ips) - 1) 90 lookup_ip = str(ips[i]) 91 del ips[i] 92 proxy_scan(lookup_ip) 93 else: 94 proxy_scan(sys.argv[1]) 